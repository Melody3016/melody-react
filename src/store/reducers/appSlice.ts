import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '@/store';
import { page404, routers } from '@/router/router';

export interface AppState {
  routers: any[];
  hasAddRouters: boolean;
  hasMenuData: boolean;
}

const initialState: AppState = {
  routers,
  hasAddRouters: false,
  hasMenuData: false
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
/* export const incrementAsync = createAsyncThunk('counter/fetchCount', async (amount: number) => {
  const response = await fetchCount(amount);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
}); */

export const appSlice = createSlice({
  name: 'app',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    insetRouter: (state, action: PayloadAction<any>) => {
      console.log('insetRouter');
      const lastIndex = state.routers.length - 1;
      // 将后台返回封装好的routers添加到路由表中
      if (state.routers[lastIndex].children) {
        for (const item of action.payload) {
          state.routers[lastIndex].children.push(item);
        }
      }
      // 判断404是否已经添加
      if (state.routers[lastIndex].path !== '*') {
        state.routers.push(page404);
      }
      state.hasAddRouters = true;
    },
    setHasMenuData: state => {
      state.hasMenuData = true;
    }
  }
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  /*  extraReducers: builder => {
    builder
      .addCase(incrementAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, state => {
        state.status = 'failed';
      });
  } */
});

export const { insetRouter, setHasMenuData } = appSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectRouters = (state: RootState) => state.app.routers;
export const selectHasAddRouters = (state: RootState) => state.app.hasAddRouters;
export const selectHasMenuData = (state: RootState) => state.app.hasMenuData;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  }; */

export default appSlice.reducer;
